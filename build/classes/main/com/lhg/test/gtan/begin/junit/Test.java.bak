package com.gtan.junit;

import java.util.regex.*;
import java.util.*;
import java.lang.*;

public class Test {
    public static void main(String args[]) {
	Test t = new Test();
/*	t.isSameKind("2.3.5","2.0.9");
	t.isSameKind("2.3.5-1","4.0.1-2");
	t.isSameKind("2.4.2-SNAPSHOT","2.4.3-SNAPSHOT");
	t.isSameKind("2.3.3.RC1","2.3.3.RC2");
*/	t.isSameKind("2.3.6","2.3.6-SNAPSHOT");
	t.isSameKind("2.3.5","2.3.6.RC1");
    }

    public Map<String,Category> judgeKind(String str) {
	Map<String,Category> map = new HashMap<>();
	if(str.contains("-") && ! str.contains("SNAPSHOT")) {
	    map.put(str,Category.DASH);
	}else if(str.contains("RC")) {
	    map.put(str,Category.RC);
	}else if(str.contains("SNAPSHOT")) {
	    map.put(str,Category.SNAPSHOT);
	}else {
	    map.put(str,Category.NUMBER);
	}
	return map;
    }

    public void isSameKind(String str1,String str2) {
	Map<String,Category> map1 = judgeKind(str1);
 	Map<String,Category> map2 = judgeKind(str2);
	String str1kind = map1.get(str1).toString();
	String str2kind = map2.get(str2).toString();
	if(str1kind.equals(str2kind)) {
	    compareSameKindStr(map1,str1,str2);
	}else {
	    compareDiffKindStr(map1,str1,map2,str2);
	}
    }
    
    /*
	前两个参数为待比较的字符串，第三个参数为比较该类型字符串所对应的模式，
	第四个参数为比较的范围标志，第五个参数为RC标志，表明要从传递的字符串中提取数字。
    */
    public void compareSameKindStr(Map<String,Category> map,String str1,String str2) {
	String strkind = map.get(str1).toString();
	if(strkind.equals("NUMBER")) {
	    compareSameKindStr(str1,str2,"[.]",true,true);
	}else if(strkind.equals("DASH")) {
	    compareSameKindStr(str1,str2,"[.|-]",true,true);
	}else if(strkind.equals("SNAPSHOT")) {
	    compareSameKindStr(str1,str2,"[.|-]",false,true);
	}else {
	    compareSameKindStr(str1,str2,"[.]",false,false);
	}
    }

    public void compareSameKindStr(String str1,String str2,String pattern1,boolean limitFlag,boolean rcFlag) {
	Pattern pattern = Pattern.compile(pattern1);
	String[] arr1 = pattern.split(str1);
	String[] arr2 = pattern.split(str2);
	int i = 0,length = 0;
	if(limitFlag) {
	    length = arr1.length;
	}else {
	    length = arr1.length-1;
	}
	for(i=0;i<length;i++) {
	    int n1 = Integer.parseInt(arr1[i]);
	    int n2 = Integer.parseInt(arr2[i]);
	    if(n1>n2) {
	        out(str1+">"+str2);
		break;
	    }else if(n1<n2) {
		out(str1+"<"+str2);
		break;
	    }else {
		if(i==(length-1) && rcFlag) {
		    out(str1+"="+str2);
		}
		if(!rcFlag && i==(length-1)) {
		    int num1RC = Integer.parseInt(extractNum(arr1[length]));
		    int num2RC = Integer.parseInt(extractNum(arr2[length]));
		    if(num1RC>num2RC) {
			out(str1+">"+str2);
		    }else if(num1RC<num2RC) {
			out(str1+"<"+str2);
		    }else {
			out(str1+"="+str2);
		    }
		}
	    } 	
	}
    }

    public String extractNum(String str) {
	int i = 0;
	StringBuffer buffer = new StringBuffer();
	for(i=2;i<str.length();i++) {
	    buffer.append(str.charAt(i));
	}
	return new String(buffer);
    }
    
    public void compareDiffKindStr(Map<String,Category> map1,String str1,Map<String,Category> map2,String str2) {
	String str1kind = map1.get(str1).toString();
	String str2kind = map2.get(str2).toString();
	String[] arr1 = splitDiffKindStr(str1kind,str1);
	String[] arr2 = splitDiffKindStr(str2kind,str2);
	compareDiffKindStr(str1,str1kind,arr1,str2,str2kind,arr2) ;
	
    }

    public void compareDiffKindStr(String str1,String str1kind,String[] arr1,String str2,String str2kind,String[] arr2) {
	int length1 = arr1.length;
	int length2 = arr2.length;
	int length = 0,i = 0;
	boolean flag = false;
	if(length1<=length2) {
	    length = length1;
	}else {
	    length = length2;
	}
	for(i=0;i<length;i++) {
	   int n1 = Integer.parseInt(arr1[i]);
	   int n2 = Integer.parseInt(arr2[i]);
	   if(n1>n2) {
		out(str1+">"+str2);
		break;
	   } else if(n1<n2) {
		out(str1+"<"+str2);
		break;
	   }else {
		if(i==(length-1)) {
		    flag = true;
		} 		
	   }
	}
	if(flag) {
	    if( i==length && str1kind.equals("NUMBER") ) {
                out(str1+">"+str2);
            } else if(i==length && str2kind.equals("NUMBER")) {
                out(str1+"<"+str2);
            }else if(i==length && str1kind.equals("RC")) {
                out(str1+">"+str2);
            }else if(i==length && str2kind.equals("RC") ) {
                out(str1+"<"+str2);
            }else if(i==length && str1kind.equals("DASH")) {
                out(str1+">"+str2);
            }else if(i==length && str2kind.equals("DASH")) {
                out(str1+"<"+str2);
            }
	}
	
    }

    public String[] splitDiffKindStr(String strkind,String str) {
	String[] arr = {};
	if(strkind.equals("Number") || strkind.equals("RC")) {
	    Pattern pattern = Pattern.compile("[.]");
	    arr = pattern.split(str);
	}else {
	    Pattern pattern = Pattern.compile("[.|-]");
	    arr = pattern.split(str);
	}
	return arr;
    }

    public void out(String str) {
	System.out.println(str);
    }
}

enum Category {
   NUMBER,DASH,RC,SNAPSHOT
}

