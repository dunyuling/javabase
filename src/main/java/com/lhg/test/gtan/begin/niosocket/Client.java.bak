package com.gtan.niosocket;

import java.net.*;
import java.nio.channels.*;
import java.nio.*;
import java.io.*;
import java.util.*;
public class Client {
    public static void main(String args[]) {
	new Client().connect();
    }

    public void connect() {
	try{
	    SocketAddress socketAddress = new InetSocketAddress(InetAddress.getLocalHost(),9999);
	    SocketChannel socketChannel = SocketChannel.open();
	    socketChannel.configureBlocking(false);
	    Selector selector = Selector.open();
	    socketChannel.register(selector,SelectionKey.OP_CONNECT);
	    socketChannel.connect(socketAddress);
	    boolean isConnect = true;

	    SocketChannel client = null;
	    while(isConnect) {
		selector.select();
		Set<SelectionKey> selectionKeys = selector.selectedKeys();
		Iterator<SelectionKey> iterator = selectionKeys.iterator();
		ByteBuffer recieveBuffer = ByteBuffer.allocate(50);
		ByteBuffer sendBuffer = ByteBuffer.allocate(50);
		BufferedReader local = new BufferedReader(new InputStreamReader(System.in));
		while(iterator.hasNext()) {
		    SelectionKey key = iterator.next();
		    if((key.readyOps() & SelectionKey.OP_CONNECT)==SelectionKey.OP_CONNECT) {
			System.out.println("============");
			System.out.println(key.readyOps());
			client = (SocketChannel)key.channel();
			if(client.isConnectionPending() ) {
			    client.finishConnect();			    
			    System.out.println("1111111111111");
			}
			client.register(selector,SelectionKey.OP_READ);
			iterator.remove();
			System.out.println("+++++++++++");
		    }else if((key.readyOps() & SelectionKey.OP_READ) == SelectionKey.OP_READ) {
			System.out.println("****************");
			System.out.println(key.readyOps());
			recieveBuffer.clear();
			client = (SocketChannel)key.channel();
			int count = client.read(recieveBuffer);
			if(count > 0) {
			    System.out.println(new String(recieveBuffer.array()));
			} 
			client.register(selector,SelectionKey.OP_WRITE);
			System.out.println("\\\\\\\\\\\\\\\\\\");
		    } else if((key.readyOps() & SelectionKey.OP_WRITE) == SelectionKey.OP_WRITE) {
			System.out.println("----------");
			System.out.println(key.readyOps());
			client = (SocketChannel)key.channel();
			String str = local.readLine();
			if(str.equals("bye")) {
			    isConnect = false;
			    client.close();
			}
			str = client.socket().getPort()+"说："+str;
			sendBuffer.clear();
			sendBuffer.put(str.getBytes());
			sendBuffer.clear();
			client.write(sendBuffer);
			client.register(selector,SelectionKey.OP_READ);			
		    }
		}   
	    }   
	    
/*	     
	    ByteBuffer byteBuffer = ByteBuffer.allocate(50);
	    BufferedReader local = new BufferedReader(new InputStreamReader(System.in));
	    boolean isConnect = true;
	
	    int port = client.socket().getLocalPort();

	    System.out.println(port+"进入频道");
		
	    while(isConnect) {
		String str = local.readLine();

		String strSend = port+"说： "+str;		

		byteBuffer.clear();
		byteBuffer.put(strSend.getBytes());
		byteBuffer.clear();
		client.write(byteBuffer);
		
		byteBuffer.clear();
		int count = client.read(byteBuffer);
		if(count>=0) {
		    System.out.println(new String(byteBuffer.array()));
		}	
		
		if(str.equals("bye")) {
		     isConnect = false;
		     client.close();
		     System.out.println("连接关闭");
		}		
	    }
*/
	}catch(IOException e) {
	     e.printStackTrace();
	}

    }
}

